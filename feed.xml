<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>is Q</title>
    <description>你听好了，趁着年轻什么都别管 | is Q，Node.js &amp; Vue.js Developer </description>
    <link>https://www.isqqy.com/</link>
    <atom:link href="https://www.isqqy.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 06 Sep 2020 18:42:38 +0800</pubDate>
    <lastBuildDate>Sun, 06 Sep 2020 18:42:38 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>在centos从0开始搭建属于自己的NAS</title>
        <description>&lt;h2 id=&quot;主要内容&quot;&gt;主要内容&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#主要内容&quot;&gt;主要内容&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#物理设备选择&quot;&gt;物理设备选择&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#系统搭建&quot;&gt;系统搭建&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#安装准备工作&quot;&gt;安装准备工作&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#安装系统&quot;&gt;安装系统&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#遇到的问题&quot;&gt;遇到的问题&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;物理设备选择&quot;&gt;物理设备选择&lt;/h3&gt;

&lt;p&gt;​	搭建NAS最简单的方式就是直接买群晖一套，但是价格比较贵，自定义范围比较窄。虽然群晖已经帮我们把硬件选择和系统都已经装好了，但是如果你除了想做一个NAS之外，还想让你的设备能做一个小型的服务器，能够部署一些自己感兴趣的东西，这时候群晖的扩展就是一个限制，所以自己选择物理设备才能更好贴合自己的需求。首先理清楚设备需要具有的特性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;7*24工作 - 耗电需要低，不然每个人月电费就是一大笔花销。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对性能有一定要求 - 因为需要部署一些自己的东西，所以需要机器的性能还行，所以cpu应该选择一个合适的，由于我目前主要的想法就是做一个NAS和部署一些小系统，所以最终选择i5-5xxx的cpu。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;散热需要着重考虑 - 对于大多数人来说，最后设备都会放在家里，如果散热有很大的噪音会无法忍受，但是要求散热能力也要到位。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;硬盘需要支持7*24工作 - 因此可以考虑红盘（专为NAS打造）和企业盘，为了节约成本可以考虑红盘，关于几种主要硬盘的使用范围，可以参考下图（从别人那里拿过来的）：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/post/2020/0906/disk-diff.jpg&quot; alt=&quot;蓝盘、黑盘、红盘、紫盘区别&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;最后在朋友的推荐下，以及根据自己的要求，最后的选择如下：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;基本套件：EZ storage Pro1 - 包括机箱、cpu、电源和主板，支持4个stata，实际是一个mstata，3个stata接口，还有pcie口可以进行扩展。&lt;/li&gt;
      &lt;li&gt;三星 128GB mstata接口固态 - 装系统使用。&lt;/li&gt;
      &lt;li&gt;威刚8G DDR3 1600MHZ 1.35V内存条。&lt;/li&gt;
      &lt;li&gt;西数红盘4T一个 - 原本想在刚集成的时候先上两个硬盘，但是资金窘迫，就先上一个；由于硬盘接口数量有限，所以根据自己的使用目的合理规划硬盘大小，因为如果硬盘大小没选好，后期会面临需要拆一个容量小的硬盘插一个容量大的硬盘，白白浪费一块硬盘；选硬盘千万别贪便宜，最好取官方旗舰店买，价格贵点无所谓，因为以后你的数据都会存在这里的，你不想你的数据某一天突然就没了吧？硬盘钱千万别省，宁可先少上也不要降低质量。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;系统搭建&quot;&gt;系统搭建&lt;/h3&gt;

&lt;p&gt;​	因为充当着服务器的功能，所以系统不言而喻就选择了Linux，但是Linux系统比较多，目前使用比较多的就是ubuntu和centos，ubuntu更适用于个人，centos更适用于企业，考虑到稳定性的原因和7*24工作，最终最终选择centos7.4版本，由于是用来做服务器，所以很多无用功能都不需要，所以直接选择centos minimal版本（可以直接去centos官网下载，选择适合自己的版本就行，这是镜像存储在国外服务器，所以下载的很慢）。&lt;/p&gt;

&lt;h4 id=&quot;安装准备工作&quot;&gt;安装准备工作&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;一个8G以上的u盘。&lt;/li&gt;
  &lt;li&gt;centos ISO版镜像。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cr173.com/soft/15480.html&quot;&gt;&lt;strong&gt;ultraiso&lt;/strong&gt;&lt;/a&gt; - 制作启动盘工具，启动盘制作教程可以参考该文章&lt;a href=&quot;https://blog.csdn.net/k331922164/article/details/53544537&quot;&gt;制作CentOS的U盘启动盘&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;一台window系统电脑 - 不知道ultraiso工具有没有其他版本的，所以需要一台windows电脑。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;安装系统&quot;&gt;安装系统&lt;/h4&gt;

&lt;p&gt;​	按照第三步的教程做好启动盘之后，将u盘插入你的设备，一般选择第一个进行安装就行，如果安装的过程中提示：&lt;strong&gt;not attached&lt;/strong&gt;，说明没有找到驱动，这时候退出重启，选择第一项不要按回车键，然后按E（具体看下方说明进行编辑），找到&lt;strong&gt;hd:LABEL=&lt;/strong&gt;关键字，然后认真核对自己&lt;strong&gt;=&lt;/strong&gt;后面的内容，是否就是自己u盘的名字，如果不是那就是有问题，将=后面的内容改为你的u盘名就行，window系统上好像盘名会默认改为大写，所以主要大小写，最好自己手动改为大写盘名，然后替换的时候也清楚。如果还是启动还报这个问题的话可以尝试改改启动盘下面文件。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;/EFI/BOOT/grub.cfg：同样和上面的改动差不多，找到所有&lt;strong&gt;hd:LABEL=&lt;/strong&gt;，然后&lt;strong&gt;=&lt;/strong&gt;后面的内容改为u盘名。&lt;/li&gt;
  &lt;li&gt;/isolinux/syslinux.cfg：找到所有&lt;strong&gt;hd:LABEL=&lt;/strong&gt;，然后&lt;strong&gt;=&lt;/strong&gt;后面的内容改为u盘名。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基本上改好之后再选择安装就没有什么问题了，很快就会进入centos的安装引导界面，如果你也有要做服务器的需求，建议在选择语言的时候就选择英文，后面的内容就很简单了，引导结束之后就是重启就完成了。&lt;/p&gt;

&lt;h4 id=&quot;遇到的问题&quot;&gt;遇到的问题&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装时报not attachec错误？&lt;/p&gt;

    &lt;p&gt;解决方案：上面已经讲了，参考安装系统部分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;想查看自己的ip地址，发现ifconfig命令不可用？&lt;/p&gt;

    &lt;p&gt;解决方案：centos7已经使用ip命令代替ifconfig的功能，如果想查看ip地址等信息，可以使用ip addr查看。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用ip addr命令发现没有给分配网卡ip地址，或者网络不可用？&lt;/p&gt;

    &lt;p&gt;解决法案：这样可能是你没有启用你的网卡，使用命令：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifup 网卡名&lt;/code&gt;启用网卡，ip addr可以看到网卡名，每一行最前面的名字就代表网卡名，但是这样只能解决本次问题，如果想永久解决该问题就需要改配置文件，配置文件一般在/etc/sysconfig/network-scirpts下，然后找到你需要改动的对应网卡配置文件（ifcfg-网卡名），然后将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ONBOOT=no&lt;/code&gt;的值改为yes，表示每次开启都启用该配置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;远程登录不了自己的系统，进入物理机发现ip地址和上次不一样了，怎么固定设备ip地址（将ip地址设为静态的）？&lt;/p&gt;

    &lt;p&gt;解决方案：默认网卡的ip地址是dhcp分配的，也就是动态分配，至于dhcp具体是什么，你没必要理解，因为这属于计算机网络的内容，你只要知道采用改方案会导致ip地址会动态分配，重启机器ip地址可能会改变，如果需要设备固定为某个ip地址需要改配置文件，配置文件通常在/etc/sysconfig/network-scirpts目录下，找到对应网卡配置文件（ifcfg-网卡名），添加或者将配置改为一下值：&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;static &lt;span class=&quot;c&quot;&gt;# 配置ip分配分式，static表示采用静态ip，也就是固定ip&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ONBOOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 开机启启用该配置，保证后面每次重启都生效&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;IPADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.5 &lt;span class=&quot;c&quot;&gt;# 分配给该网卡的ip地址&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GATEWAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1 &lt;span class=&quot;c&quot;&gt;# 分配给该网卡的网关，你不需要了解这是什么意思，你将它配置为你连接的路由器的ip就行，如果不知道你路由器的ip地址，你登录路由器管理页面的那个ip地址就是，一般就是192.1638.0.1，或者最后一位为.1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NETMASK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;255.255.255.0 &lt;span class=&quot;c&quot;&gt;# 子网掩码，网关和这个都属于计算机网络知识，你也不需要明白代表什么，你使用ip addr查看ip地址，看看ip地址/后面数字带表多少，一般是8的整数倍，是8的几倍，前面几个就是255，如这里是24，所以前面三部分都是255，如果不是8的整数倍，那就了解一下子网掩码的计算方式吧。&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一个几T的硬盘，挂载之后显示为3.8G？&lt;/p&gt;

    &lt;p&gt;解决方案：这是因为硬盘格式不对，所以识别不了，可以把硬盘格式成指定格式（ext4）再挂载，格式化的话使用该命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkfs -t ext4 /dev/sda&lt;/code&gt;，/dev/sda代表哪个硬盘（个人不建议分区，因为分区是需要自己去计算起始位置，而且Linux下分区也就是代表一个目录，所以个人觉得没必要分区）；查看已装载的硬盘，可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fdisk -l&lt;/code&gt;命令，如果想看已挂载的硬盘可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;df -l&lt;/code&gt;命令，如果已装载的硬盘在df命令下没有输出，那么意味着没有挂载，使用mount命令进行挂载就行，可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount -t ext4 /dev/sda /data&lt;/code&gt;，其中-t指定格式，/dev/sda代表哪个硬盘，/data代表挂载的路径；上述这样挂载每次重启机器都需要重新挂载，为了以后能够自动挂载可以改动配置文件，将需要挂载的硬盘新增一行添加至/etc/fstab中，其中第一项表示要挂载的硬盘，第二项表示要挂载的路径，第三项是类型（ext4），后面的几项不太明白，直接用的前面几个相同的值。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 07 Sep 2020 02:23:23 +0800</pubDate>
        <link>https://www.isqqy.com/2020/09/07/at-centos-zero-start-nas/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2020/09/07/at-centos-zero-start-nas/</guid>
        
        <category>NAS</category>
        
        <category>CentOS</category>
        
        
      </item>
    
      <item>
        <title>HTTP1.1 Headers速查清单</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作为一个程序猿，了解常用的HTTP首部的意思及它的使用场景是必须的，但是由于http首部数量太多，平常经常接触到的就那么一些，不常用的很容易忘记具体意思，为了方便查看特整理如下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;快速导航&quot;&gt;快速导航&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#快速导航&quot;&gt;快速导航&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#通用首部&quot;&gt;通用首部&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#通用信息性首部&quot;&gt;通用信息性首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#通用缓存首部&quot;&gt;通用缓存首部&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#请求首部&quot;&gt;请求首部&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#请求信息性首部&quot;&gt;请求信息性首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#条件请求首部&quot;&gt;条件请求首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#安全请求首部&quot;&gt;安全请求首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#代理请求首部&quot;&gt;代理请求首部&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#响应首部&quot;&gt;响应首部&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#响应信息性首部&quot;&gt;响应信息性首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#协商首部&quot;&gt;协商首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#安全响应首部&quot;&gt;安全响应首部&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实体首部&quot;&gt;实体首部&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#实体信息性首部&quot;&gt;实体信息性首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#内容首部&quot;&gt;内容首部&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实体缓存首部&quot;&gt;实体缓存首部&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;http首部主要分为五大部分：&lt;/p&gt;

 	1. 通用首部：各种类型的报文（请求、响应报文）都可以使用，提供有关报文最基本的信息。
 	2. 请求首部：专用于请求报文的首部，用于给服务器提供相关信息，告诉服务器客户端的期望和能力。
 	3. 响应首部：专用于响应报文的首部，用于告诉客户端是谁在响应以及响应者的能力。
 	4. 实体首部：用于描述http报文的负荷（主体），提供了有关实体及其内容的相关信息。
 	5. 扩展首部：非标准首部，由应用开发者定义的首部。

&lt;h3 id=&quot;通用首部&quot;&gt;通用首部&lt;/h3&gt;

&lt;p&gt;​	通用首部又可以分为以下几类：&lt;/p&gt;

 	1. 通用信息性首部。
 	2. 通用缓存首部。

&lt;h4 id=&quot;通用信息性首部&quot;&gt;通用信息性首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Connection：客户端和服务器可以指定与请求/响应连接相关选项；connection首部具有两个功能，第一个就是去除标准的逐跳首部（Connection、Transfer-Encoding、TE、Proxy-Authorization、Proxy-Authenticate、Upgrade、Keep-Alive和Trailer），也就是去掉不再转发给代理的首部，这些需要去除的首部在Connection首部中列出；第二个就是保持持久连接，HTTP1.1默认就是持久连接，如果客户端和服务器任意一端想中断连接就可以使用Connection: close，HTTP1.1以前的版本默认不是持久连接，因此如果想开启持久连接可以使用Connection: Keep-Alive。&lt;/li&gt;
  &lt;li&gt;Date：报文创建日期和时间。&lt;/li&gt;
  &lt;li&gt;MIME-Version：报文发送方遵循的MIME版本。&lt;/li&gt;
  &lt;li&gt;Trailer：如果报文采用分块传输编码（chunked transfer encoding），那么这个首部将会列出拖挂部分的首部集合（报文主体后面使用的首部集合）。&lt;/li&gt;
  &lt;li&gt;Transfer-Encoding：传输的报文采用的编码方式。&lt;/li&gt;
  &lt;li&gt;Update：发送方想要使用的升级版本或者协议。&lt;/li&gt;
  &lt;li&gt;Via：报文经过的中间节点（代理、网关等）。&lt;/li&gt;
  &lt;li&gt;Upgrade：用于检测http协议或者其他协议是否有可用的更高版本，其值也可以指定一个完全不同的协议名。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;通用缓存首部&quot;&gt;通用缓存首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cache-Control：传输缓存指令，用于实现缓存机制，大致上可以分为缓存请求指令和缓存响应指令两大类：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;缓存请求指令：
        &lt;ol&gt;
          &lt;li&gt;no-store：不缓存客户端请求和服务器响应，即不进行缓存。&lt;/li&gt;
          &lt;li&gt;no-cache：在发布缓存资源之前，必须向源端服务器进行验证。&lt;/li&gt;
          &lt;li&gt;max-age：设置缓存有效时长，超过这个时长缓存将失效。&lt;/li&gt;
          &lt;li&gt;min-fresh：客户端期望获取在指定时间保持最新状态的响应。&lt;/li&gt;
          &lt;li&gt;max-stale：表明客户端愿意接受一个已经过期的资源，但是过期时间不能超过指定时长。&lt;/li&gt;
          &lt;li&gt;no-transform：不能够对资源进行转换或者转变，代理不能够修改Content-type、Content-Rage和Content-Encoding等HTTP头。&lt;/li&gt;
          &lt;li&gt;only-if-cached：客户端只接受已缓存的资源。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;缓存响应指令：&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;no-store：不缓存客户端请求和服务器响应，即不进行缓存。&lt;/li&gt;
          &lt;li&gt;no-cache：在发布缓存资源之前，必须向源端服务器进行验证。&lt;/li&gt;
          &lt;li&gt;must-revalidate：在资源过期之后，未向服务器成功验证之前，不能够使用缓存进行响应。&lt;/li&gt;
          &lt;li&gt;no-transform：不能够对资源进行转换或者转变，代理不能够修改Content-type、Content-Rage和Content-Encoding等HTTP头。&lt;/li&gt;
          &lt;li&gt;public：允许任何对象缓存（代理服务器、客户端）响应，即使是通常不可缓存的内容（1. 没有max-age指令或者Expires消息头，2. post请求响应）。&lt;/li&gt;
          &lt;li&gt;private：响应只允许单用户（比如用户浏览器）进行缓存，任何中间节点都不能缓存响应。&lt;/li&gt;
          &lt;li&gt;max-age：设置缓存有效时长，超过这个时长缓存将失效。&lt;/li&gt;
          &lt;li&gt;proxy-revalidate：和must-revalidate的效果一样，但是仅用于共享缓存（比如代理），私有缓存会被忽略。&lt;/li&gt;
          &lt;li&gt;s-maxage：覆盖max-age和Expires首部，仅限用共享缓存，私有缓存会被忽略。&lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;💡ps：共享缓存和私有缓存的区别就是缓存的资源能否能提供给多个用户使用，私有缓存的资源只能给单用户使用。&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pragma：HTTP1.0规范中的首部，具体表现取决于实现，因此可能具有不一样的效果；除非是在只支持HTTP1.0版本的应用程序中才使用该首部，否则其他情况下都应该优先考虑Cache-Control首部；理论上该首部的效果和Cache-Control: no-cache的效果一样，但是因为具体表现得参考实现。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;请求首部&quot;&gt;请求首部&lt;/h3&gt;

&lt;p&gt;​	请求首部还可以分为以下几类：&lt;/p&gt;

 	1. 请求信息性首部。
 	2. 条件请求首部。
 	3. 安全请求首部。
 	4. 代理请求首部。

&lt;h4 id=&quot;请求信息性首部&quot;&gt;请求信息性首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Client-IP：提供了客户端的IP地址。&lt;/li&gt;
  &lt;li&gt;From：提供了客户端用户的邮件地址。&lt;/li&gt;
  &lt;li&gt;Host：提供了接受请求的服务器主机名和端口号。&lt;/li&gt;
  &lt;li&gt;Referer：提供了包含当前请求的文档URI。&lt;/li&gt;
  &lt;li&gt;UA-Color：提供了客户端显示器颜色相关信息。&lt;/li&gt;
  &lt;li&gt;UA-CPU：提供了客户端CPU的类型或制造商。&lt;/li&gt;
  &lt;li&gt;UA-Disp：提供了客户端显示器能力的相关信息。&lt;/li&gt;
  &lt;li&gt;UA-OS：提供了运行在客户端的操作系统名称和版本。&lt;/li&gt;
  &lt;li&gt;UA-Pixels：提供了客户端显示器的像素信息。&lt;/li&gt;
  &lt;li&gt;User-Agent：将发起请求的应用程序告诉服务器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;💡ps：UA-*和Client-IP首部并不是规范中的内容，只是有客户端实现。&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Accept：告诉服务器客户端可以接受（处理）的媒体类型，使用MIME类型表示。&lt;/li&gt;
  &lt;li&gt;Accept-Charset：告诉服务器客户端可以接受（处理）的字符集类型。&lt;/li&gt;
  &lt;li&gt;Accept-Encoding：告诉服务器客户端可以接受的内容编码方式。&lt;/li&gt;
  &lt;li&gt;Accept-Language：告诉服务器客户端可以接受哪些语言。&lt;/li&gt;
  &lt;li&gt;TE：告诉服务器可以使用哪些扩展传输编码。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;条件请求首部&quot;&gt;条件请求首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Expect：可以向服务器列出所期望的行为，HTTP1.1规范只列出了一个期望条件：100 Continue。&lt;/li&gt;
  &lt;li&gt;If-Match：如果实体标记与文档当前的实体标记一致，那么就获取此文档。&lt;/li&gt;
  &lt;li&gt;If-Modified-Since：如果在指定的日期时间（响应头Last-Modified）之后资源有被修改过，就重新获取这份资源，否则就使从缓存中取资源的副本。&lt;/li&gt;
  &lt;li&gt;If-None-Match：如果实体标记（Etag）与文档当前的实体标志不一致，就获取此文档。&lt;/li&gt;
  &lt;li&gt;If-Range：在一定条件下Range首部生效，值可以为etag或者时间。&lt;/li&gt;
  &lt;li&gt;If-Unmodified-Since：如果在指定的日期时间之后资源没有被修改过，就重新获取这份资源，否则就使从缓存中取资源的副本。&lt;/li&gt;
  &lt;li&gt;Range：如果服务器支持范围请求，则请求资源的指定的范围。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;安全请求首部&quot;&gt;安全请求首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization：向服务器提供能够验证客户端身份的数据，由两部分组成 &amp;lt;type&amp;gt; &amp;lt;credetials&amp;gt;，type代表验证类型；credetials代表验证令牌。&lt;/li&gt;
  &lt;li&gt;Cookie：从客户端传送数据给服务端，通常情况下用于传输会话ID，传送给服务器的数据按理来说是来自于服务器上一次返回给客户端的。&lt;/li&gt;
  &lt;li&gt;Cookie2：用来说明请求端的cookie版本。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;代理请求首部&quot;&gt;代理请求首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Max-Farward：在将请求发送给源端服务器时，经过代理服务器和网关等中间节点的最大次数。&lt;/li&gt;
  &lt;li&gt;Proxy-Authorization：与Authorization首部的作用一样，只是这里是客户端提供给代理服务器的用于验证身份的凭证，通常是在服务器返回407状态码及Proxy-Authenticate的时候发送。&lt;/li&gt;
  &lt;li&gt;Proxy-Connection：与Connection首部的作用一样，只是这里是在与代理建立连接的时候使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;响应首部&quot;&gt;响应首部&lt;/h3&gt;

&lt;p&gt;​	响应首部也可以分为以下几类：&lt;/p&gt;

 	1. 响应信息性首部。
 	2. 协商首部。
 	3. 安全响应首部。

&lt;h4 id=&quot;响应信息性首部&quot;&gt;响应信息性首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Age：表示响应已存在时间（从创建响应开始计算，单位秒）。&lt;/li&gt;
  &lt;li&gt;Public：表示服务器为该资源支持的请求方法列表。&lt;/li&gt;
  &lt;li&gt;Retry-After：如果资源不可用的话，应该在时间点之后再次进行尝试；通常用于503状态码服务器暂时维护或者升级的时候，用于告诉客户端服务大概多久会恢复。&lt;/li&gt;
  &lt;li&gt;Server：服务器应用程序名称和版本号。&lt;/li&gt;
  &lt;li&gt;Title：对HTML文档来说，就是HTML文档的源端给出的标题。&lt;/li&gt;
  &lt;li&gt;Warning：对报文当前状态可能存在问题进行说明，ps：《HTTP权威指南》说它只是一个响应首部，但是MDN说它是一个通用首部。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;协商首部&quot;&gt;协商首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Accept-Ranges：告诉客户端服务器支持范围请求，具体值说明的是范围请求使用的单位。&lt;/li&gt;
  &lt;li&gt;Vary：需要查看其他首部的列表，会影响之后的响应，之后的请求只有vary列出来的所有首部的值完全相同时才会使用缓存（MDN的例子似乎表明请求首部和响应首部对应），否则不会当作是同一个请求。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;安全响应首部&quot;&gt;安全响应首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Proxy-Authenticate：代理对客户端的质询，表示获取代理上资源需要采用的身份验证方式。&lt;/li&gt;
  &lt;li&gt;Set-Cookie：服务器向客户端设置cookie，通常情况下使用该首部来设置会话ID传送给客户端。&lt;/li&gt;
  &lt;li&gt;Set-Cookie2：与Set-Cookie首部的作用一样，但是目前已经被废弃。&lt;/li&gt;
  &lt;li&gt;www-Authenticate：服务器客户端的质询，表示获取服务器上的资源需要采用的身份验证方式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实体首部&quot;&gt;实体首部&lt;/h3&gt;

&lt;p&gt;​	实体首部可以细分为以下几类：&lt;/p&gt;

 	1. 实体信息性首部。
 	2. 内容首部。
 	3. 实体缓存首部。

&lt;h4 id=&quot;实体信息性首部&quot;&gt;实体信息性首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Allow：列出了可以对此资源执行的请求方法列表。&lt;/li&gt;
  &lt;li&gt;Location：用于告诉客户端，资源的实际位于何处（URL）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;内容首部&quot;&gt;内容首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Base：解析主体中的相对URL时使用的基础URL。&lt;/li&gt;
  &lt;li&gt;Content-Encoding：对主体执行的编码方式。&lt;/li&gt;
  &lt;li&gt;Content-Language：解析主体时最适应使用的语言。&lt;/li&gt;
  &lt;li&gt;Content-Length：主体长度或者尺寸。&lt;/li&gt;
  &lt;li&gt;Content-Location：资源实际所在的位置。&lt;/li&gt;
  &lt;li&gt;Content-MD5：主体的md5校验和。&lt;/li&gt;
  &lt;li&gt;Content-Range：在整个资源中此实体表示的字节范围。&lt;/li&gt;
  &lt;li&gt;Content-Type：该主体的对象类型（MIME类型）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;实体缓存首部&quot;&gt;实体缓存首部&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Etag：实体特定版本的标志符，用于缓存的强校验。&lt;/li&gt;
  &lt;li&gt;Expires：该值指定日期时间之后资源失效，需要从新进行对资源进行验证。&lt;/li&gt;
  &lt;li&gt;Last-Modified：资源最后一次被修改的日期和时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;《HTTP权威指南》&lt;/li&gt;
  &lt;li&gt;MDN&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 28 Jun 2020 05:39:39 +0800</pubDate>
        <link>https://www.isqqy.com/2020/06/28/http-headers/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2020/06/28/http-headers/</guid>
        
        <category>网络</category>
        
        <category>HTTP1.1</category>
        
        <category>首部</category>
        
        
      </item>
    
      <item>
        <title>HTTP1.1状态码速查清单</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;任何一个开发者都会接触到HTTP状态码，但是规范已经定义的状态码数量较多，经常会忘记，这篇文章就是提供一个速查手册。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;快速索引&quot;&gt;快速索引&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#100---101信息状态码&quot;&gt;100 - 101信息状态码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#200---206成功状态码&quot;&gt;200 - 206成功状态码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#300---307重定向状态码&quot;&gt;300—307重定向状态码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#400---417客户端错误状态码&quot;&gt;400—417客户端错误状态码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#500---505服务器错误状态码&quot;&gt;500—505服务器错误状态码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;http状态码由三位数字组成，第一位代表状态所属的类型，目前分为五大类：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;100-199：信息状态码。&lt;/li&gt;
  &lt;li&gt;200-299：表示成功状态。&lt;/li&gt;
  &lt;li&gt;300-399：表示资源被转移。&lt;/li&gt;
  &lt;li&gt;400-499：表示客户端请求出错。&lt;/li&gt;
  &lt;li&gt;500-599：表示服务器处理请求出错。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;100---101信息状态码&quot;&gt;100 - 101信息状态码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;100：continue，告诉客户端后面的数据传输可以继续。该状态码实际上是一个优化措施，应该是给服务器传输大体积的实体时，可以先用一个值为100 continue的except请求询问服务器是否支持该资源的处理或者能够使用该资源，服务器不应该给任何没有协带值为100 continue的except请求响应100 continue状态码。&lt;/li&gt;
  &lt;li&gt;101：switching protocols，说明服务器正在按照客户端的要求，切换为update指定的协议。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;200---206成功状态码&quot;&gt;200 - 206成功状态码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;200：ok，请求完成，响应实体的主体部分包含用户所请求的资源。&lt;/li&gt;
  &lt;li&gt;201：created，资源被创建（比如put），响应实体的主体中应该包含引用各种被创建资源的URL，同时也可以使用location首部指定资源的实际位置。&lt;/li&gt;
  &lt;li&gt;202：accepted，请求被接受，但是服务器没有进行任何操作。服务器无法保证资源一定会被创建，响应报文的主体中应该包含请求状态信息，甚至应该包含请求操作完成的估计时间。&lt;/li&gt;
  &lt;li&gt;203：non-authoritative infromation，实体首部包含的信息不是来自源端服务器，而是来自资源的一份副本，中间节点无法对实体首部的信息与资源源端服务器进行验证。&lt;/li&gt;
  &lt;li&gt;204：not content，响应报文的主体部分不存在，一般用在不需要展示新文档的情况。&lt;/li&gt;
  &lt;li&gt;205：reset content，告诉浏览器重置当前文档的所有表单元素。&lt;/li&gt;
  &lt;li&gt;206：partial content，表示成功执行某个部分或Range（范围）请求。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;300---307重定向状态码&quot;&gt;300 - 307重定向状态码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;300：Multiple choices，当一个URL指向多个资源时，服务器就可以向客户端返回该状态码；一般情况下如果存在多个资源，客户端应该为用户提供选择，同时也可以使用Location首部指出默认的资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;301：Moved permanently，所请求URL的资源被移除时使用，资源的新URL应该在Location指出，以后都是使用Location给出的URL返回资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;302（http1.0）：Found，所请求URL的资源被移除时使用，客户端应该使用Location给出的URL作为资源的临时位置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;303：See other，告知客户端应该使用另一个URL来访问资源，主要用于将post请求定向到指定的资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;304：Not modified，当请求协带某些特殊的首部的时候，请求就变成了条件请求，用于验证客户端本地的资源副本和源服务器的资源是否一样，如果原服务器的资源并没有发生改变，就可以使用这个状态码，告知客户端可以使用本地资源副本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;305：Use proxy，应该使用代理访问，这个状态码用于某个特定资源必须通过代理进行获取，存储该资源的所有服务器都应该通过代理访问资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;306：暂时未使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;307（http1.1）：Temporary redirect，所请求的资源被移除时使用，客户端应该使用Location首部指出的URL来临时请求资源。&lt;/p&gt;

    &lt;p&gt;​	302、303和307都是临时重定向码，但是他们实际上http1.0和http1.1为了兼容而导致的，其实302在http1.0中表示的意思是，服务器接收到一个post请求之后，将会响应302状态码，并希望客户端可以接受重定向URL，然后客户端通过get请求获取资源。但是在 http1.1中303状态码取代了302的作用，因此为了将302保留给http1.0应用程序使用，所以http1.1中使用了307来表示临时重定向。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;400---417客户端错误状态码&quot;&gt;400 - 417客户端错误状态码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;400：Bad request，客户端发送的请求服务器无法理解，请求可能存在语法问题。&lt;/li&gt;
  &lt;li&gt;401：Unauthorized，未授权，当访问的资源需要进行认证的时候，向客户端返回该状态码，并应该在响应带上某些首部，告知客户端具体采用什么认证方案。&lt;/li&gt;
  &lt;li&gt;402：Payment required，暂时未使用。&lt;/li&gt;
  &lt;li&gt;403：Forbidden，禁止访问，客户端没有访问该资源的权限。&lt;/li&gt;
  &lt;li&gt;404：Not found，服务器找不到客户端所请求的资源。&lt;/li&gt;
  &lt;li&gt;405：Method not allowed，客户端所请求的URL不支持当前请求方法，响应中应该包含Allow首部，告诉客户端支持的请求的方法有哪些。&lt;/li&gt;
  &lt;li&gt;406：Not acceptable，客户端可以指定能够接受的数据类型，当服务器上对应请求URL没有客户端接受的数据类型时返回此状态码。&lt;/li&gt;
  &lt;li&gt;407：Proxy authentication required，和401的效果一样，只是该状态码用于对资源进行认证的代理服务器。&lt;/li&gt;
  &lt;li&gt;408：Request timeout，客户端请求的时间太长，请求超时。&lt;/li&gt;
  &lt;li&gt;409：Conflict，当请求可能会导致资源冲突时使用该状态码。&lt;/li&gt;
  &lt;li&gt;410：Gone，和404类似，但是该状态码说明服务器以前拥有该资源，只是现在被移除了。&lt;/li&gt;
  &lt;li&gt;411：Length required，当服务器要求所请求应该协带Content-length首部但是请求中未协带该首部的时候使用此状态码。&lt;/li&gt;
  &lt;li&gt;412：Precondition failed，客户端发请求条件请求，并且其中的一个条件失败时使用此状态码，使用Expect首部就是条件请求。&lt;/li&gt;
  &lt;li&gt;413：Request entity too large，客户端所发送的实体比服务器能够或者希望处理的要大时，使用此状态码。&lt;/li&gt;
  &lt;li&gt;414：Request url too length，客户端所发送的请求中URL比服务器能偶活着希望处理的要大时，使用此状态码。&lt;/li&gt;
  &lt;li&gt;415：Unsupported media type，客户端发送的实体是服务器无法理解或者无法支持的类型时，使用此状态码&lt;/li&gt;
  &lt;li&gt;416：Request range satisfiable，当客户端请求某个资源的某个范围时，当此范围无效或者无法满足时，使用此状态码。&lt;/li&gt;
  &lt;li&gt;417：Exceptation failed，请求的Expect首部包含客户端的请求期望，当服务器无法满足时，使用该状态码。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;500---505服务器错误状态码&quot;&gt;500 - 505服务器错误状态码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;500：Internal server error，服务器在处理请求时遇到问题，导致无法提供服务时，使用此状态码。&lt;/li&gt;
  &lt;li&gt;501：Not implement，客户端发起的请求超出服务器的能力范围，比如使用了服务器不支持的请求方法。&lt;/li&gt;
  &lt;li&gt;502：Bad gateway，作为网关或者代理的服务器，在请求和响应链的下一条链路上收到一个伪响应（连接不上父服务器）时，使用该状态码。&lt;/li&gt;
  &lt;li&gt;503：Server unavailable，服务器暂时无法为客户端提供服务，但是将来可以提供服务，如果服务器知道资源什么时候可用，可以在响应中包含一个Retry-After首部。&lt;/li&gt;
  &lt;li&gt;504：Gateway Timeout，和408类似，只是该响应来自于一个网关或者代理服务器，在它们等待另一个服务器超时使用该状态码。&lt;/li&gt;
  &lt;li&gt;505：Http version not supported，客户端请求使用了服务器无法或者不愿支持的http版本，比如有一些应用程序不愿支持早期的http版本。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;参考资料：《HTTP权威指南》&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jun 2020 00:36:36 +0800</pubDate>
        <link>https://www.isqqy.com/2020/06/21/http-status-code-list/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2020/06/21/http-status-code-list/</guid>
        
        <category>网络</category>
        
        <category>HTTP1.1</category>
        
        <category>状态码</category>
        
        
      </item>
    
      <item>
        <title>调用Html5plus API实现具有原生功能的web App之离线打包踩坑</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“路漫漫其修远兮，吾将上下而求索”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;这是在一个原有web项目上进行的一成封装，使其成为一个apk格式的安装包，还可以在你的web项目中调用Html5plus Api来实现一些原生功能，官方文档&lt;a href=&quot;http://www.html5plus.org/doc/zh_cn/webview.html&quot;&gt;html5+规范&lt;/a&gt;，请慎重入坑，主要是官方文档写的不太好以及几乎没有社区，只能自己一个一个的爬。&lt;br /&gt;
以前我们的一个5+应用都是使用hbuilder进行云打包的，但是最近快要上线了，所以需要对接个推，接入个推就需要进行离线打包，因此有了这笔记！&lt;/p&gt;

&lt;h3 id=&quot;下载h5sdk&quot;&gt;下载H5+SDK&lt;/h3&gt;

&lt;p&gt;H5+应用离线打包的第一步，就是直接去官网下载相应版本的SDK：&lt;a href=&quot;http://ask.dcloud.net.cn/article/103&quot;&gt;HTML 5+ SDK 更新日志&lt;/a&gt;；最好下载最新版本的sdk，因为最新版本的sdk会修复以前出现的Bug（如果你不想自己踩太多的坑的话，我推荐下载最新版本的sdk包）。不要担心官方关于离线打包的文档和你使用的版本对应不上，然后造成自己离线打包出现重重阻碍，选择最新的sdk只会让你开头痛苦一下，后面你会比较顺利；不然后面你可能就是不断的打补丁，这个过程估计更痛苦，而且遇上SDK bug那么你还是得更新。&lt;/p&gt;

&lt;h3 id=&quot;离线打包准备工作&quot;&gt;离线打包准备工作&lt;/h3&gt;

&lt;p&gt;如果自己的电脑上没有Android Studio（后面AS均代表该软件）的话记得去下载一个，我这里使用的是Android Studio3.4.1，先讲一下SDK中各文件夹的用途，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/one.png&quot; alt=&quot;one&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，我这里使用的是现在最新的sdk1.9.9.62327，其中目录结构如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;两个markdown文件都是说明使用该版本的SDK进行离线打包需要注意的一些东西，比如说某某功能不能和另一功能同时存在。&lt;/li&gt;
  &lt;li&gt;SDK就不用说了，就是真正的内容，其中的AndroidManifest.xml是安卓配置文件，assets是我们离线打包时需要放置app/src/main/目录下的，完整路径为app/src/main/assets；libs是一些功能依赖包文件（比如个推、分享等等）。&lt;/li&gt;
  &lt;li&gt;HBuilder-Hello和HBuilder-integerate-As都是离线打包demo，但是如果使用Android Studio进行离线打包的话请点击HBuilder-integerate-As，如果是使用Eclipse的话可以试一下另一版本（我没试过）。&lt;/li&gt;
  &lt;li&gt;在uni-app中使用5+插件demo、UniPlugin-Hello-AS应该都是开发插件相关demo吧！由于此次没有用过这两个文件夹，因此它们的用处暂时不明白。&lt;/li&gt;
  &lt;li&gt;Feature-Android.xls是权限清单，在AndroidManifest.xml配置文件需要使用（调用相应的功能需要相应的权限），可以用来参考。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;打开Android Studio，使用以下方式打开HBuilder-integerate-As这个demo：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/two.png&quot; alt=&quot;two&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有两种方式进行离线打包，我上面说的是我推荐的，还有一种的话直接使用start a new Android Studio project新建一个原生安卓项目，看一下官方文档后面操作几乎和我说的这个教程区别不大，就是有些文件你需要自己删除、添加，具体教程：&lt;a href=&quot;https://ask.dcloud.net.cn/article/13232&quot;&gt;使用新版本5+SDK创建最简Android原生工程（Android studio）&lt;/a&gt;，有很多文件都没有，踩的坑会比较多；我推荐的这种打包方式官方文档为：&lt;a href=&quot;http://ask.dcloud.net.cn/article/508&quot;&gt;Android平台本地（离线）打包指南 - Android Studio&lt;/a&gt;；按照官方文档的步骤的话，打开demo之后直接编译一遍，用来判断官方demo是否能够正常运行，如果demo不能运行下面的步骤就没有意义了，可以考虑换一个SDK包了。如果能正常运行，官方文档之后的第一步是引入依赖包，如果你是按照我推荐的这个方式来离线打包的，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/three.png&quot; alt=&quot;three&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这一步可以直接跳过，因为这个demo几乎已经集成所有的功能，依赖已经引入了，如果你再从新引入，可能会导致AndroidManifest.xml配置文件合并失败，所以信我的，别给自己找麻烦，后面功能正常之后再参考Feature-Android.xls引入相应依赖包和添加权限。&lt;br /&gt;
官方文档的第二步分是配置应用权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/four.png&quot; alt=&quot;four&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以直接跳过，demo也集成了，这就是我推荐的原因。&lt;br /&gt;
第三步配置第三方库的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/five.png&quot; alt=&quot;five&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以先跳过等到引入程序之后编译成功再配置。&lt;/p&gt;

&lt;h3 id=&quot;离线打包&quot;&gt;离线打包&lt;/h3&gt;

&lt;p&gt;如果你是直接离线打包并没有使用过云打包的话，那么你需要将你代码build后的文件使用hbuilder（x）进行离线打包（使用过云打包的应该看到过）如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/six.png&quot; alt=&quot;six&quot; /&gt;&lt;/p&gt;

&lt;p&gt;离线打包在顶部的发行功能菜单中，如果你还只有一个dist文件夹（build的包）那么你需要使用hubuilderx先建一个空的5+app项目，这样你就会有一个manifest文件，然后你可以将你的dist文件夹下面的内容拷贝至该项目根目录下，然后点击上面的manifest.json文件可以可视化配置一些信息（启动图标、sdk配置等）。配置完成之后点击发行&amp;gt;原生app-本地打包&amp;gt;生成本地打包app资源，放置的位置为&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/seven.png&quot; alt=&quot;seven&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的demo项目下的/app/src/main/assets/apps/XXXX/www/目录底下（其中XXXX为你的appId，注意：在AS左边的文件结构显示AcmApp.www代表AcmApp/www这是两个文件夹，不要把文件命名为AcmApp.www，不然上面就变成/app/src/main/assets/apps/XXXX.www了，这里是一个固定的格式appid/www，一定要按照这个格式，否则会导致编译失败），appId在hbuilderx可以查看manifest.json可视化界面或者直接查看manifest.json代码文件，一般你在使用hbuilderx离线打包时这一段XXXX/www/会自动生成，你只需要选择好放置的路径就行（你打开demo的/app/src/main/assets/apps路径下）。&lt;/p&gt;

&lt;p&gt;到这里几乎完成一半了，现在要开始改改配置。&lt;/p&gt;

&lt;h3 id=&quot;修改相应配置&quot;&gt;修改相应配置&lt;/h3&gt;

&lt;p&gt;在你（AS中）打开的demo项目中找到AndroidManifest.xml，修改步骤可以产看官方文档：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/eight.png&quot; alt=&quot;eight&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于这里官方文档已经说的很详细了，所以我就不多说了，图标配置也说的很详细了，补充一点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;icon.png代表桌面显示图标。&lt;/li&gt;
  &lt;li&gt;push.png代表推送显示图标（没试验过，因为我们应用icon和push使用的为一张图片）。&lt;/li&gt;
  &lt;li&gt;splash.png（应用启动页面）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意：这里的名字一定要按这个格式命名。&lt;/p&gt;

&lt;p&gt;修改/app/src/main/assets/data/dcloud_control.xml文件，appid和manifest.json文件的id一样，appver和manifest.json文件的version.name一样，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/nine.png&quot; alt=&quot;nine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后修改/app/build.gradle文件，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/ten.png&quot; alt=&quot;ten&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中applicationId配置为你的包名。&lt;/p&gt;

&lt;p&gt;如果你是用另一种方法进行离线打包，那你需要按照这种方式一步步从demo里面拷贝文件并进行修改，同时我说的SDK/assets/data文件放置在你离线项目下这个位置就行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190520/eleven.png&quot; alt=&quot;eleven&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是没有apps文件？没办法你只能在从demo项目中拷贝过来，然后将H57991E95这个文件夹替换成你的离线包（Hbuilderx通过发行&amp;gt;原生app-本地打包&amp;gt;生成本地打包app资源生成的包）记住一定是这种格式appid/www/真正的资源文件，这也是我不推荐使用这种方式从零开始，如果你有一定的Android功底可以这样。&lt;/p&gt;

&lt;h3 id=&quot;androidmanifestxml重要配置项配置&quot;&gt;AndroidManifest.xml重要配置项配置&lt;/h3&gt;

&lt;p&gt;不出意外上面的步骤已经让你成功离线打包了，而且应该是可以成功编译成功的，但是编译成功不代表你的应用所有功能都正常，这里有几个关于AndroidManifest.xml重要的配置项。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;个推的配置项&lt;/p&gt;

    &lt;p&gt;首先得添加权限，检查一下你的项目是否添加：&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 配置在manifest节点中 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.READ_PHONE_STATE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.ACCESS_NETWORK_STATE&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.WAKE_LOCK&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.VIBRATE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.ACCESS_WIFI_STATE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.CALL_PHONE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getui.permission.GetuiService.你的app包名&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;permission&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getui.permission.GetuiService.你的app包名&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:protectionLevel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;normal&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;后面这两项server在同一设备上只能同时存在一个，因此配置了个推的就不要配置米推了。推送还需要做如下配置（还需要配置meta-data第三方库数据，可以参考官方文档，这里很简单）：&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;!-- 配置在application节点中 --&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;receiver&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;io.dcloud.feature.apsGt.GTNotificationReceiver&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.BOOT_COMPLETED&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;你的包名.__CREATE_NOTIFICATION&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;你的包名.__REMOVE_NOTIFICATION&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;你的包名.__CLEAR_NOTIFICATION&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;你的包名.__CLILK_NOTIFICATION&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/receiver&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;上面标注包名的地方一定注意替换成你的包名（反向域名格式）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于Android7.0+为了提高安全性对文件的权限控制更加严格，因此runtime的许多方法都会失效，我遇到的就有install（更新app）、打开文件（openFile），涉及到文件的应该都会有问题，而且还不会报错，这样根本让我无法定位，最后看到一篇博文才让我摆脱了这个问题，不然差一点就放弃了，在配置文件application节点中添加如下代码：&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;provider&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.support.v4.content.FileProvider&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:authorities=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;你的包名.fileprovider&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:exported=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:grantUriPermissions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta-data&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.support.FILE_PROVIDER_PATHS&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:resource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@xml/file_provider&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;原本那篇博文还需要在src/main/res目路下添加xml/file_proviser.xml，但是我没添加一样可以，如果你按照上面配置runtime功能还是不正常可以尝试配置一下，博文链接：&lt;a href=&quot;https://blog.csdn.net/yy1300326388/article/details/52787853&quot;&gt;解决 Android N 7.0 上 报错：android.os.FileUriExposedException&lt;/a&gt;；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;还有一个值得注意的地方就是：有很多需要把它demo的包名替换成你自己的包名，但是有一些地方你是不能替换成你自己的包名的，一旦替换轻则某些功能异常，重则直接编译不通过，但是怎么区分呢？一般改动的时候你先把它原来的值删了，然后在按着它的值再敲一遍，不要复制，如果提示中有它以前那个值代表这是一个引用其他地方的文件，你不能删除；还有一种方法，配置引用的大部分依赖来自于/src/main/java文件夹，你在纠结是否把包名替换成你的包名的时候，去该路径找相应文件如com.HBuilder.integrate.SDK_WebView（我上面提过在AS文件结构.代表什么意思），则查看java文件夹下是否有com/Hbuilder/intergrate文件夹，并且还有SDK_WebView文件，如果有那么你就不能替换成你的包名。简单一点的方法就是，凡是配置文件里面的activity节点里的包名就要慎重替换，几个基本不能替换的：ActivityEntry、SDK_WebView、SDK_WebApp替换之后会导致直接不能通过编译，配置如下：&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 其中com.HBuilder.integrate你的参考你java文件夹下的目录结构，也许后面更新的结构有所改变 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.HBuilder.integrate.ActivityEntry&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:configChanges=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orientation|keyboardHidden&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:launchMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleTask&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:screenOrientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:windowSoftInputMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;adjustResize&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.HBuilder.integrate.SDK_WebApp&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:configChanges=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orientation|keyboardHidden|screenSize|keyboard|navigation|mcc|mnc|fontScale&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:screenOrientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/DCloudTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 离线配置沉浸式  SDK_WebApp  作为apk入口时  必须设置 SDK_WebApp   的主题为android:theme=&quot;@style/DCloudTheme&quot; --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.HBuilder.integrate.SDK_WebView&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:configChanges=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orientation|keyboardHidden|screenSize|keyboard|navigation|mcc|mnc|fontScale&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:screenOrientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensor&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/DCloudTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;h5+应用离线打包的坑暂时还只踩到这里，以后遇到再过来补充。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后添加几个有参考价值的官方文档，官方文档确实坑，但是这几个文档你还是可以当作字典一样做参考：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://ask.dcloud.net.cn/article/100&quot;&gt;5+ API使用的Android权限列表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ask.dcloud.net.cn/article/35861&quot;&gt;Android动态权限申请&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;离线打包关于Android7+文件操作异常问答：&lt;a href=&quot;http://ask.dcloud.net.cn/article/12923&quot;&gt;Android7解决plus.runtime.openFile方法打开文件无响应问题（需本地打包并修改SDK）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 20 May 2019 14:52:52 +0800</pubDate>
        <link>https://www.isqqy.com/2019/05/20/webapp-offline-package/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2019/05/20/webapp-offline-package/</guid>
        
        <category>5+ APP</category>
        
        <category>HTML5plus</category>
        
        <category>apk</category>
        
        <category>离线打包</category>
        
        <category>记录</category>
        
        
      </item>
    
      <item>
        <title>js常用设计模式</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;js常用设计模式之实战&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;适配器模式&quot;&gt;适配器模式&lt;/h3&gt;

&lt;p&gt;适配器模式就是充当着一个转换器的作用。举个例子吧，比如我们有一个只有VGA接口的显示器，但是现在我们电脑一般都只支持HDMI接口，这时怎么办？对，就是找一个转换器，将显示器和电脑链接起来。而我们的适配器模式和这个转换器的功能相同。适配器模式前端应该是经常使用的，根据reshful接口风格，传回来的数据字段都是前后端协商的，难免后台有改动的时候，如果这个字段我们在成百上千的地方使用过，难道我们一个一个的改？有一个还不错的方法就是vscode 全局搜索，全局替换，但是万一误伤呢（其他地方用了这个字段，但是并不是代表这个接口返回的数据）？这时候适配器模式就可以派上用场了。在前端接受后端数据的地方写一个适配器，将数据转化之后再分发到各个页面，这样既不影响我们的前端的显示，同时我们的改动也非常小，只要配置一下规则就行了。适配器实现的简单的例子如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 场景：假设后台和前端对接数据，一般来说前端与后台协商的字段不会轻易变动，
 * 但是这只是一种协商而已。因此一旦后台某个字段改变了，刚好前端有几十
 * 甚者上百个地方使用了，如果一个个改。。。。
 * 使用适配器模式将可以化解这种尴尬，只有只考虑一层，多层思想一样
 * @param {Object} obj
 * @returns {Object}
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;changde&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;68.0.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`转换过程中发现键冲突，在rule中key：&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;，想转换为: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;装饰器模式&quot;&gt;装饰器模式&lt;/h3&gt;

&lt;p&gt;装饰器模式是指在不改动原有功能的基础上添加新功能。说一个实际点的情况吧，你现在有一个当点击某个dom时有一段js动画，但是你不知道这个dom是否已经有同事写过点击事件绑定了，如果已经有同事写过了，那么直接给dom绑定你将覆盖同事的辛辛苦苦写的代码（估计想砍你的心都有了）。关于这个例子装饰器模式示例如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 场景：假设有一个dom当点击它的时候调用某一个函数，现在需求改变（在你写好之后），现在要增加
 * 某个操作。当然只有一个地方使用你可以直接改一改就行，但是情况并不是你想的那样，有上百的dom
 * 都有这个需求，这时候你一个个的改？
 * @param {String} id 要操作的元素id
 * @param {Function} fn 你要加的新功能
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decarator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;单例模式&quot;&gt;单例模式&lt;/h3&gt;

&lt;p&gt;单例模式看名称就知道是什么意思了，如果可以实例化的则只能实例化一次，后面的实例化都是返回的都是第一次实例化的实例。为什么需要这种模式呢？想象一下某个实例我们使用了成百上千次，但是其实并不需要每次都实例化，我们只需要借用一个实例来调用它的方法，但是新手在使用的时候并没有考虑这么多，每次用的时候都实例化一次，这样我们就会占用许多内存，而且都是没什么意义的？因此如果使用单例模式对这个兑现进行封装一下，如果这个对象已经实例化过，那么就返回已经实例化的实例。实例化模式有两种模式，以下是使用IIFE（立即调用函数）实现版本：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 单例模式（IIFE）
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;singleMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This is a Constructor Function, please use new keyword!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;观察者模式&quot;&gt;观察者模式&lt;/h3&gt;

&lt;p&gt;在没有详细研究设计模式之前，听别人说观察者模式就是发布订阅模式，直到自己去研究的时候发现它们确实有渊源，但是并不是一个东西。观察者模式它（Subject）会维护一个依赖列表，当内容更新时会主动通知依赖列表里面的所有Observe。但是发布订阅模式是订阅者会在订阅中心订阅它关心的主题，而发布者会在订阅中心发布相关的主题消息，因此它们之间是有一个中间人（调度中心）。有一篇文章对观察者模式和发布订阅模式讲的很不错，我也是看了这篇文章才有所了解&lt;a href=&quot;https://juejin.im/post/5a14e9edf265da4312808d86&quot;&gt;观察者模式 vs 发布-订阅模式&lt;/a&gt;，一下是观察者模式的一个图解（也是从上面那篇博文偷过来的，发布订阅模式的图解也偷自该博文）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190511/observe.png&quot; alt=&quot;Observe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是发布订阅模式的图解：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190511/publish.png&quot; alt=&quot;Publish_Subscribe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看出发布订阅模式明显比观察者模式多了一个环节，就是中间那一部分（调度中心），发布者和订阅者都只和调度中心相关。因此可以看出发布订阅模式与观察者模式的区别主要就是观察者模式Subject与Observe直接联系，而且双方各自知道对方的存在，但是发布订阅模式发布者和订阅者都只和调度中心有通信，订阅者和发布者并不清楚对方是否存在。&lt;/p&gt;

&lt;p&gt;说完了观察者模式和发布订阅模式的区别现在贴一个简单的观察者模式示例：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 观察者模式/Subject类，必须使用new关键字进行实例化
 * 观察者模式：维护一个依赖列表，当内容更新时主动通知，依赖列表里面的所有Observe。
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This is a Constructor Function, please use new keyword!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 由于每个Subject都有添加、删除和通知功能，为了节省资源消耗，所有实例共享这些方法。
 * 但是重写prototype会丢失constructor属性，因此需要给constructor重新赋值
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isAdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;you not have add Observe!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 观察者模式/Observe类，必须使用new关键字进行实例化
 * @param {String} name Observe名字
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This is a Constructor Function, please use new keyword!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 由于每个Observe都有update消息功能，为了节省资源消耗，所有实例共享这个方法。
 * 但是重写prototype会丢失constructor属性，因此需要给constructor重新赋值
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;, I attention &quot;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot; ready update!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;发布订阅模式&quot;&gt;发布订阅模式&lt;/h3&gt;

&lt;p&gt;发布订阅模式在观察者模式上已经进行了解释，在这里就不进行说明了。其实发布订阅模式我觉得给它写成三部分是最好，一个发布者部分、一个订阅者部分和一个消息调度中心（当然你也可以只用一个部分实现，网上已经有了实现版本）；由于本人有点小懒，使以只写了两部分，发布者部分和调度中心共用了，其实主要是因为这个示例太简单了没办法拆开了，但我个人偏向分三部分写，因为这样既清晰扩展的时候只要改动相应部分就可以了，以下是发布订阅模式的示例（使用了单例模式的另一种实现，class关键词）：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 发布-订阅模式
 * 发布订阅模式：与观察者的区别在于发布订阅不直接与发布者关联，它有一个调度中心
 * 订阅者只管在调度中心订阅就行，发布者只需要在调度中心发布通知。
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PublishSubscribe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;not subscriber!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscribes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscribes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;subscribes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unSubscribe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;haveEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isHave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;haveEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!~&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;you not subscribe: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 订阅者类，必须使用new关键字进行实例化
 * @param {String} name Subscribe名字
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subscribe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This is a Constructor Function, please use new keyword!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 由于每个订阅者都有notice消息功能，为了节省资源消耗，所有实例共享这个方法。
 * 但是重写prototype会丢失constructor属性，因此需要给constructor重新赋值
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;notice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;, I attention &quot;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot; ready update!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到此常用的几种设计模式已经讲完了。&lt;/p&gt;
</description>
        <pubDate>Sun, 12 May 2019 04:05:00 +0800</pubDate>
        <link>https://www.isqqy.com/2019/05/12/design-mode/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2019/05/12/design-mode/</guid>
        
        <category>设计模式</category>
        
        <category>记录</category>
        
        
      </item>
    
      <item>
        <title>apk数字签名实践</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;apk数字签名实践之深入探索&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;这段时间有一个对web app进行签名验证的一个需求，为了确保所下载的apk包来自于我们所信任的服务器，防止请求被劫持或者替换，由于暂时还是使用http协议在上https之前有一个过渡期，所以不得不考虑传输安全，毕竟http就是在整个网络上”裸奔”。&lt;/p&gt;

&lt;h3 id=&quot;数字签名&quot;&gt;数字签名&lt;/h3&gt;

&lt;p&gt;做这个之前我们首先得了解数字签名到底是什么，在做这个验签之前我也一直是处于听说过的状态中，所以做这个任务之前花了一点时间去了解一下。简单说数字签名只做一件事情，就是证明这个内容一定来自于某人，为什么呢？因为使用私钥进行签名，因此只有他自己能生成自己的签名（私钥被盗不算）。&lt;/p&gt;

&lt;p&gt;说这个数字签名之前我们首先简单提一下密码学的知识，加密方法大致分为两类：对称加密（加密和解密都使用一套密钥）、非对称加密（有两套密钥，一套私钥、一套公钥，私钥只有自己知道，公钥可以给其他人；一般发送方用公钥加密发送消息，而只有自己能够用私钥进行解密，以此达到安全传输消息的目的；而签名一般使用私钥，用公钥进行验证签名）。但是我在实现我的过程中发现了一个问题，网上大部分讲解数字签名的文章好像和真正的签名算法有所出入，最后在前组长以及查看《密码编码学与网络安全》数字签名这一章才让我有点清晰。&lt;/p&gt;

&lt;p&gt;网上的资料关于数字签名的流程主要为：服务器将内容进行hash得到内容的摘要，然后使用私钥加上摘要完成签名，然后将内容以及签名一起发给接收方，接收方收到之后使用服务器的公钥进行解密得到摘要一，然后再使用和服务器一样的hash算法对内容进行hash得到摘要二，然后对比两个摘要是否相等，如果相等就说明签名通过，不相等就验签失败。&lt;/p&gt;

&lt;h3 id=&quot;实际运用并不顺利&quot;&gt;实际运用并不顺利&lt;/h3&gt;

&lt;p&gt;带着认识开始做签名任务，发现在和后台对接的时候有点小差别，我理解的是要解密对比摘要，很后台说的验签有点出入（内容hash+公钥+签名代入签名验证算法）得出结果？最后查了一下资料发现数字签名的一般模型为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190510/signature_model.png&quot; alt=&quot;数字签名基本模型&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据这个模型来看，第一部分理解都是没有问题的，但是问题就是处在验签过程，图上是直接使用使用内容hash+签名代入签名验证算法得出结果，和后台理解的完美贴合。看到这里我就更加疑惑了，难道网上的资料都有问题？而且维基给出来的数字签名原理和我以前理解的一样，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190510/digital_signature.svg.png&quot; alt=&quot;维基数字签名原理&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一部分和上图的过程一摸一样，唯一的区别就是验签过程。出于找到原因的目的继续在《密码编码学与网络安全》这本书中寻找原因，最终找到了影子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190510/signature_method.png&quot; alt=&quot;两种签名方法&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RSA方法：hash函数的输入是要签名的消息，输出是定长的hash码（前H），用发送发的私钥（PRa）将该Hash码加密形成签名，然后发送消息及其签名。接收方收到消息后计算hash码（后H），并且使用发送方的公钥对签名解密，如果计算出的Hash码与解密出结果相同，则认为签名是有效的。因为只有发送方拥有私钥，所以只有发送方能够产生有效的私钥。
DSA方法：DSA采用hash函数，得到hash码，它以hash码和为此次签名产生的随机数（k）作为签名函数的输入，签名函数依赖于发送发的私钥（PRa）和一组参数，这一组参数为通信伙伴共有，可以认为这组参数构成全局公钥（PUG）。接受方，对接收到的消息产生hash，这个hash码和签名一起作为验证函数的输入，验证函数依赖于全局公钥和发送方公钥（PUa）。若验证函数的输出等于r成分则签名有效。&lt;/p&gt;

&lt;p&gt;最后我的理解是：数字签名的模型是上图13.1这样的，但是在实现方式上是可以调整，因此网上的大部分资料应该都是相对于某一种签名方式来说的，而不是对签名过程进行分析。&lt;/p&gt;

&lt;h3 id=&quot;apk签名实践&quot;&gt;apk签名实践&lt;/h3&gt;

&lt;p&gt;这里我只说前端方向，在这个任务中我采用的就是一般模型的基本流程，先生成一套RSA公私钥，前端直接将公钥硬编码。后端读取apk（buffer读取）并将内容进行hash（前后端协商使用sha256），依赖发送方的私钥将hash码代入签名函数，得到签名；把apk和签名一起发给前端，前端首先下载apk，然后读取apk文件（前端读取可以文本形式、dataurl形式、ArrayBuffer形式），前后端读取形式不同验签一定失败，由于后台使用的是buffer读取，因此前端也只能采用buffer读取。⚠️（crypto-js中sha256不支持原生的ArrayBuffer，最后选择js-sha256，签名验证库：jsencrypt，除了文档不太友好之外都挺不错，自带一个测试demo）。文件读取方式统不统一就决定了此次签名能不能成功。&lt;/p&gt;

&lt;p&gt;以上都是个人理解。&lt;/p&gt;
</description>
        <pubDate>Sat, 11 May 2019 01:22:00 +0800</pubDate>
        <link>https://www.isqqy.com/2019/05/11/apk-digital-signature/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2019/05/11/apk-digital-signature/</guid>
        
        <category>密码学</category>
        
        <category>安全</category>
        
        <category>记录</category>
        
        
      </item>
    
      <item>
        <title>DNS解析过程</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;DNS解析过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;为了了解DNS解析的整个过程，但是我查看了一些博文，但都不是我想要的结果，要么讲的很浅显，要么就是那种专门做计算机网络才能看得懂得文章，因此为了避免以后自己忘掉，把这次的理解总结一下。&lt;/p&gt;

&lt;h3 id=&quot;迭代查询和递归查询&quot;&gt;迭代查询和递归查询&lt;/h3&gt;

&lt;p&gt;DNS大致解析过程如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190503/dns-parse.png&quot; alt=&quot;DNS解析流程&quot; /&gt;
首先我先说一下我对DNS递归查询以及迭代查询的理解：DNS的解析过程默认是采用递归查询，也就是一层一层的传递下去，但是如果遇到某个服务器的RA字段（表示是否支持递归查询）为0，或者DNS域名查询请求中RD字段（表示是否期望使用递归查询）为0时，此时将会采用迭代查询，迭代查询就是每次查询到的结果不是由你递交请求的服务器代你继续查询，而是将查询结果返回给当前发出请求的机器。上图客户端将域名查询请求交给本地DNS服务器之后是由本地DNS服务器代替客户端继续查询，而不是将根域名服务器的地址返回给客户端，再让客户端请求，因此该阶段就是递归查询；本地DNS服务器后面的过程就是迭代查询过程。&lt;/p&gt;

&lt;h3 id=&quot;从一个域名到一个ip地址到底发生了什么&quot;&gt;从一个域名到一个IP地址到底发生了什么&lt;/h3&gt;

&lt;p&gt;当客户端需要通过一个域名请求资源时，必须知道该域名对应的IP地址是什么；为什么一定要知道请求目的地的IP才能发送请求？因为我们现有的网络几乎都是基于TCP/IP协议的，而TCP/IP协议是基于IP地址的进行通讯的。假设现在客户端要访问www.google.com，发生的DNS解析过程大致如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端首先查询自己的缓存中是否有该域名的访问记录，如果有的话直接访问对应的IP地址，否则进行下一步。&lt;/li&gt;
  &lt;li&gt;在缓存没有查询到要访问域名的记录，则去查询主机下面的host文件（记录一些常用网址域名对应的ip地址的一个文件）是否有记录，如果有的话直接访问对应的IP地址，否则进行下一步。&lt;/li&gt;
  &lt;li&gt;host文件中也未找到，则像本地配置的DNS服务器进行查询（这里只以首选DNS服务器为例，备用DNS服务的过程基本相同），本地DNS服务器接收到域名解析请求之后查询自己的缓存是否有该域名的记录，如果有直接返回域名对应的IP地址；如果没有，则去查询根域名服务器（这里本地DNS域名服务器采用迭代查询，递归查询的过程更简单一层一层查到底直至返回结果）。&lt;/li&gt;
  &lt;li&gt;根域名服务器收到该域名解析请求后，查询该域名对应的顶级域名服务器，将顶级域名服务的IP地址返回给本地DNS服务器。&lt;/li&gt;
  &lt;li&gt;本地DNS服务器将结果缓存，同时向该域名的顶级域名服务器发出请求；顶级域名服务器收到请求后，首先查看自己的缓存是否有该域名的记录，如果有则直接返回，否则将查询该域名的二级域名服务器，并将IP地址返回给本地DNS域名服务器。&lt;/li&gt;
  &lt;li&gt;后面的查询过程都类似于第五步直至返回最终结果，将结果缓存并将IP地址返回给客户端。&lt;/li&gt;
  &lt;li&gt;客户端将访问IP地址并将查询结果进行缓存。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 03 May 2019 17:50:00 +0800</pubDate>
        <link>https://www.isqqy.com/2019/05/03/DNS-parse-progress/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2019/05/03/DNS-parse-progress/</guid>
        
        <category>计算机网络</category>
        
        <category>记录</category>
        
        
      </item>
    
      <item>
        <title>使用CSS生成常见图形</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;css面试题之生成各种常见图形&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;最近一直在看面试题，发现了一些有趣的东西，有很多东西以前不是很懂，都停留在使用的层次上，所以现在开始恶补基础。刚好了看到了一个面试题，感觉以前没有对这个知识点了解的深入，因此现在做个笔记，防止自己忘记。&lt;/p&gt;

&lt;h3 id=&quot;css图形实现原理&quot;&gt;css图形实现原理&lt;/h3&gt;

&lt;p&gt;如果你是一名前端开发人员，那么你一定熟悉css吧！那你试一下用纯css实现一个三角形、五角星、平行四边形？用css生成的各种图形基本上都依赖于border、border-radius属性。这里不记录具体怎么用css实现一个图形，只说明如何利用这两个属性，当然除了这两个属性之外，复杂的图形还需要用before、after这两个强大的伪类。&lt;/p&gt;

&lt;p&gt;在解释如何用border生成图形之前先来加强一个认识，先声明一个div，然后设置border效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190426/border-one.png&quot; alt=&quot;border样式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么border是梯形呢？详解如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190426/border-detail.png&quot; alt=&quot;border详情&quot; /&gt;&lt;/p&gt;

&lt;p&gt;border的上边宽由content宽度决定（就是图片的内容width）下边框等于content宽度+左右两边border宽度，高度等于我们设置的border大小，而且边框相接的地方是各自一半；因此要用css形成一个三角形就很简单了，三角形只有三边，那么就设置内容width等于0，这样就达到了三边的目的了。但是宽度呢？由于border下边宽的高度由三部分组成：内容宽度、左、右border宽度。因此宽度可以通过设置border-left、border-right来完成，高度就直接设置border大小就可以了。形成过程如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2019/20190426/triangle.png&quot; alt=&quot;三角形生成原理&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据该推理得出的代码如下，可以将一下代码在自己本地编辑器进行验证：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;.tranigle {
  height: 0;
  width: 0;
  border-bottom: 100px solid yellowgreen;
  border-left: 50px solid transparent;
  border-right: 50px solid transparent;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这只是其中的一种，根据上面的原理，还可以实现直角三角形（border-left和border-right设置一个就行）、等腰直角三角形等等。&lt;/p&gt;

&lt;p&gt;理解了上面的实现原理几乎就可以实现很多图像了，比如椭圆（利用border-radius可以设置两个半径）、五角星（使用一个三角形加上before、after拼接成另三个角）、六角形（两个三角形）、八角形（两个四边形，旋转一定角度transform: rotate(45deg)）、十二角形（三个四边形，旋转一定角度）、吃豆人（就是一个圆，隐藏右边的90度）、平行四边形（矩形，变形skew）等等。这里有一篇文章实现了大部分图形&lt;a href=&quot;https://juejin.im/post/5cbd1f0ae51d456e5e035f45?utm_source=gold_browser_extension#heading-24&quot;&gt;45个值得收藏的 CSS 形状&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Apr 2019 04:45:00 +0800</pubDate>
        <link>https://www.isqqy.com/2019/04/27/css-figure/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2019/04/27/css-figure/</guid>
        
        <category>CSS</category>
        
        <category>记录</category>
        
        
      </item>
    
      <item>
        <title>这是一个测试文章</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“测试成功了”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;而后 Google 上查了下，发现国内有一个代码托管平台叫 Coding ，也可以将个人的 Hexo 博客托管到平台上，然后有点激动，说时迟那时快，立刻动手尝试将自己的个人博客托管到 Coding 上，中间遇到很多坑，折腾好久，最终成功，特此记录。
据了解，之前很多人都是把博客托管到国内的 gitcafe上，后来 gitcafe 被 Coding 收购。当然，据我所知国内还有其他代码托管平台，例如有个代码托管平台叫码云，但是码云能不能托管个人博客代码，我就不清楚了，没怎么用码云，基本用的都是 GitHub ，有需要的可以自行了解下。&lt;/p&gt;

&lt;h2 id=&quot;别骗我了&quot;&gt;别骗我了&lt;/h2&gt;
&lt;p&gt;爱因斯坦小学数学不好，成绩只有一分。后来努力学习，成为了最伟大的物理学家。很励志是不是？特么的爱因斯坦在德国上的小学啊，德国的一分是满分啊！！！乃们这些大人还打算骗我们到什么时候！！！德国考试成绩评分为6分制——1分：sehr gut（优秀）；2分：gut（良好）；3分：befriedigend（中等）；4分：ausreichend（及格）；5 分：mangelhaft（不及格）；6分：ungenuegend（差）。&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Apr 2019 18:00:00 +0800</pubDate>
        <link>https://www.isqqy.com/2019/04/06/test/</link>
        <guid isPermaLink="true">https://www.isqqy.com/2019/04/06/test/</guid>
        
        <category>开始</category>
        
        <category>记录</category>
        
        
      </item>
    
  </channel>
</rss>
